// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace serverApp.Migrations
{
    [DbContext(typeof(MainDbContext))]
    partial class MainDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("RefreshTokenEntity", b =>
                {
                    b.Property<string>("TokenHash")
                        .HasColumnType("text")
                        .HasColumnName("token_hash");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("TokenHash");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("refresh_tokens", (string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("CreditCardEntity", b =>
                {
                    b.HasBaseType("Entity");

                    b.Property<decimal>("Many")
                        .HasColumnType("numeric")
                        .HasColumnName("many");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("number");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasIndex("OwnerId")
                        .IsUnique();

                    b.ToTable("credit_cards", (string)null);
                });

            modelBuilder.Entity("DeliveryCompanyEntity", b =>
                {
                    b.HasBaseType("Entity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name");

                    b.Property<string>("WebSite")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("website");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("WebSite")
                        .IsUnique();

                    b.ToTable("delivery_companies", (string)null);
                });

            modelBuilder.Entity("ImageEntity", b =>
                {
                    b.HasBaseType("Entity");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.HasIndex("ProductId");

                    b.ToTable("images", (string)null);
                });

            modelBuilder.Entity("ProductCategoryEntity", b =>
                {
                    b.HasBaseType("Entity");

                    b.Property<Guid>("DeliveryCompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("delivery_company_id");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)")
                        .HasColumnName("name");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("seller_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasIndex("DeliveryCompanyId");

                    b.HasIndex("Name");

                    b.HasIndex("OwnerId");

                    b.ToTable("product_categories", (string)null);
                });

            modelBuilder.Entity("PurchasedProductEntity", b =>
                {
                    b.HasBaseType("Entity");

                    b.Property<Guid?>("BuyerId")
                        .HasColumnType("uuid")
                        .HasColumnName("buyer_id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("Delivered")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delivered");

                    b.Property<DateTime>("MustDeliveredBefore")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("must_delivered_before");

                    b.Property<DateTime>("PurchasedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("purchased_date");

                    b.HasIndex("BuyerId");

                    b.HasIndex("CategoryId");

                    b.ToTable("purchased_products", (string)null);
                });

            modelBuilder.Entity("UserEntity", b =>
                {
                    b.HasBaseType("Entity");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailVerify")
                        .HasColumnType("boolean")
                        .HasColumnName("email_verify");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.ToTable((string)null);
                });

            modelBuilder.Entity("CustomerEntity", b =>
                {
                    b.HasBaseType("UserEntity");

                    b.Property<Guid>("CreditCardId")
                        .HasColumnType("uuid")
                        .HasColumnName("credit_card_id");

                    b.HasIndex("CreditCardId")
                        .IsUnique();

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("SellerEntity", b =>
                {
                    b.HasBaseType("UserEntity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.ToTable("sellers", (string)null);
                });

            modelBuilder.Entity("RefreshTokenEntity", b =>
                {
                    b.HasOne("UserEntity", null)
                        .WithOne()
                        .HasForeignKey("RefreshTokenEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_constraint");
                });

            modelBuilder.Entity("CreditCardEntity", b =>
                {
                    b.HasOne("CustomerEntity", null)
                        .WithOne()
                        .HasForeignKey("CreditCardEntity", "OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeliveryCompanyEntity", b =>
                {
                    b.OwnsOne("PhoneNumberValueObject", "PhoneNumber", b1 =>
                        {
                            b1.Property<Guid>("DeliveryCompanyEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("phone_number");

                            b1.HasKey("DeliveryCompanyEntityId");

                            b1.HasIndex("Number")
                                .IsUnique();

                            b1.ToTable("delivery_companies");

                            b1.WithOwner()
                                .HasForeignKey("DeliveryCompanyEntityId");
                        });

                    b.Navigation("PhoneNumber")
                        .IsRequired();
                });

            modelBuilder.Entity("ImageEntity", b =>
                {
                    b.HasOne("ProductCategoryEntity", "ProductCategory")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("product_constraint");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("ProductCategoryEntity", b =>
                {
                    b.HasOne("DeliveryCompanyEntity", "DeliveryCompany")
                        .WithMany()
                        .HasForeignKey("DeliveryCompanyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("delivery_company_constraint");

                    b.HasOne("SellerEntity", "Owner")
                        .WithMany("ProductsCategories")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("seller_constraint");

                    b.OwnsOne("TagsValueObject", "Tags", b1 =>
                        {
                            b1.Property<Guid>("ProductCategoryEntityId")
                                .HasColumnType("uuid");

                            b1.Property<List<string>>("Tags")
                                .IsRequired()
                                .HasColumnType("varchar[]")
                                .HasColumnName("tags");

                            b1.HasKey("ProductCategoryEntityId");

                            b1.ToTable("product_categories");

                            b1.WithOwner()
                                .HasForeignKey("ProductCategoryEntityId");
                        });

                    b.Navigation("DeliveryCompany");

                    b.Navigation("Owner");

                    b.Navigation("Tags")
                        .IsRequired();
                });

            modelBuilder.Entity("PurchasedProductEntity", b =>
                {
                    b.HasOne("CustomerEntity", "Buyer")
                        .WithMany("Purchases")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("buyer_constraint");

                    b.HasOne("ProductCategoryEntity", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("delivery_company_constraint");

                    b.Navigation("Buyer");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CustomerEntity", b =>
                {
                    b.HasOne("CreditCardEntity", null)
                        .WithOne()
                        .HasForeignKey("CustomerEntity", "CreditCardId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductCategoryEntity", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("CustomerEntity", b =>
                {
                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("SellerEntity", b =>
                {
                    b.Navigation("ProductsCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
